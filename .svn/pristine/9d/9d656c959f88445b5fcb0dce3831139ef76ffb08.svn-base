package com.cinema.booking;

import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

import javax.servlet.ServletException;
import javax.servlet.ServletInputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.google.gson.Gson;

public class BookingServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;

	private final Gson gson;

	private final BookingAgent bookingAgent;

	private Map<Long, Lock> locks = new HashMap<>();

	public BookingServlet() {
		this.gson = new Gson();
		this.bookingAgent = BookingAgentFactory.getInstance().createBookingAgent();
	}

	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		BookRequest bookRequest = getBookRequest(request.getInputStream());
		if (bookRequest.getSeatIds().isEmpty()) {
			response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
			return;
		}

		Lock lock = getLock(bookRequest.getProjectionId());
		lock.lock();
		try {
			bookingAgent.book(bookRequest, request.getRemoteUser());
		} catch (BadBookingRequestException ex) {
			System.err.println(ex.getMessage());
			response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
		} catch (BookingException ex) {
			System.err.println("Failed to book seats.");
			ex.printStackTrace();
			response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
		} finally {
			lock.unlock();
		}
	}

	private Lock getLock(Long hallId) {
		synchronized (locks) {
			if (!locks.containsKey(hallId)) {
				locks.put(hallId, new ReentrantLock());
			}
			return locks.get(hallId);
		}
	}

	private BookRequest getBookRequest(ServletInputStream inputStream) {
		InputStreamReader reader = new InputStreamReader(inputStream);
		return gson.fromJson(reader, BookRequest.class);
	}
}
